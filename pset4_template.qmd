---
title: "Your Title"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points. 
We use (`*`) to indicate a problem that we think might be time consuming. 
    
## Style Points (10 pts) 
Please refer to the minilesson on code style
**[here](https://uchicago.zoom.us/rec/share/pG_wQ-pHTQrJTmqNn4rcrw5V194M2H2s-2jdy8oVhWHkd_yZt9o162IWurpA-fxU.BIQlSgZLRYctvzp-)**.

## Submission Steps (10 pts)
1. This problem set is a paired problem set.
2. Play paper, scissors, rock to determine who goes first. Call that person *Partner 1*.
    - Partner 1 (name and cnet ID):
    - Partner 2 (name and cnet ID): Sohyun Lim / shlim
3. Partner 1 will accept the `ps4` and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted. 
4. "This submission is our work alone and complies with the 30538 integrity policy." Add your initials to indicate your agreement: \*\*\_\_\*\* \*\*\_\_\*\*
5. "I have uploaded the names of anyone else other than my partner and I worked with on the problem set **[here](https://docs.google.com/forms/d/185usrCREQaUbvAXpWhChkjghdGgmAZXA3lPWpXLLsts/edit)**"  (1 point)
6. Late coins used this pset: \*\*\_\_\*\* Late coins left after submission: \*\*\_\_\*\*
7. Knit your `ps4.qmd` to an PDF file to make `ps4.pdf`, 
    * The PDF should not be more than 25 pages. Use `head()` and re-size figures when appropriate. 
8. (Partner 1): push  `ps4.qmd` and `ps4.pdf` to your github repo.
9. (Partner 1): submit `ps4.pdf` via Gradescope. Add your partner on Gradescope.
10. (Partner 1): tag your submission in Gradescope

**Important:** Repositories are for tracking code. **Do not commit the data or shapefiles to your repo.** The best way to do this is with `.gitignore`, which we have covered in class. If you do accidentally commit the data, Github has a [guide](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#removing-files-from-a-repositorys-history). The best course of action depends on whether you have pushed yet. This also means that both partners will have to download the initial raw data and any data cleaning code will need to be re-run on both partners' computers. 

## Download and explore the Provider of Services (POS) file (10 pts)

1. 
For this exercise, I reviewed the problem set and data dictionary to determine the essential variables needed 
from the `Provider of Services (POS)` dataset. Since we are focused on analyzing short-term hospitals, 
the selected variables include:

- **Provider Category Code (PRVDR_CTGRY_CD)**: Identifies the main category of the provider (e.g., hospital).
- **Provider Category Subtype Code (PRVDR_CTGRY_SBTYP_CD)**: Further categorizes providers, with code "01" used to filter short-term hospitals.
- **State Code (STATE_CD)**: Provides the state in which the provider is located, enabling regional analysis.
- **County Code (SSA_CNTY_CD)**: Indicates the county, for more detailed geographic filtering if needed.
- **Provider Number (PRVDR_NUM)**: A unique identification number for each provider, which allows for individual tracking.
- **Certification Date (CRTFCTN_DT)**: Records the date of certification, which could be used for analysis based on the certification timeline.
- **Termination Code (PGM_TRMNTN_CD)**: Shows whether the provider is still active, helping exclude terminated providers if necessary.
- **Facility Name (FAC_NAME)**: The name of the hospital, useful for identification.
- **City Name (CITY_NAME)**: The city where the provider is located, allowing for finer geographical analysis.
- **Zip code (ZIP_CD)**:ZIP Code (ZIP_CD): The five-digit ZIP code representing the provider's physical location, useful for precise regional analysis and mapping.

2. 

```{python}
import pandas as pd
file_path = r"/Users/sohyunlim/Desktop/python-ps4-shilm/pos2016.csv.csv"
data = pd.read_csv(file_path)

```
    a.
```{python}
    # Filter for short-term hospitals with provider category code (PRVDR_CTGRY_CD) = 1 and subtype code (PRVDR_CTGRY_SBTYP_CD) = 1
short_term_hospitals = data[(data['PRVDR_CTGRY_CD'] == 1) & (data['PRVDR_CTGRY_SBTYP_CD'] == 1)]
    # Count the number of short-term hospitals
hospital_count = short_term_hospitals.shape[0]
print("Number of short-term hospitals:", hospital_count)
    # Check the number of short-term hospitals
hospital_count = short_term_hospitals.shape[0]
print("Number of short-term hospitals:", hospital_count)
```
    b.

    ##Based on my analysis, I identified **7,245** short-term hospitals in the 2016 dataset, using `provider 
    ##type code = 01` and `subtype code = 01`. This count is notably higher than external estimates, 
    ##which report approximately **4,862** short-term acute care hospitals in 2016.

    ##The discrepancy may be due to differences in dataset definitions or the inclusion of additional facility 
    ##types in the `pos2016.csv` file. Further examination is required to align the dataset criteria with 
    ##standard definitions used in external sources.

    ##Reference:
    ##- Agency for Healthcare Research and Quality (AHRQ)


3.
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import os

# Define file paths for each year
file_paths = {
    '2016': r'/Users/sohyunlim/Desktop/python-ps4-shilm/pos2016.csv.csv',
    '2017': r'/Users/sohyunlim/Desktop/python-ps4-shilm/pos2017.csv.csv',
    '2018': r'/Users/sohyunlim/Desktop/python-ps4-shilm/pos2018.csv.csv',
    '2019': r'/Users/sohyunlim/Desktop/python-ps4-shilm/pos2019.csv.csv'
}

# Dictionary to store filtered data for each year
data = {}

# Loop through each file and check if it exists
for year, file_path in file_paths.items():
    if os.path.exists(file_path):
        try:
            # Load data with specified encoding
            df = pd.read_csv(file_path, encoding="ISO-8859-1", low_memory=False)
            
            # Filter for short-term hospitals: provider category code = 1 and subtype code = 1
            df_filtered = df[(df['PRVDR_CTGRY_CD'] == 1) & (df['PRVDR_CTGRY_SBTYP_CD'] == 1)].copy()
            df_filtered['Year'] = year  # Add year column
            
            # Store filtered data for each year
            data[year] = df_filtered
            print(f"Data for {year} loaded and filtered successfully.")
            
        except Exception as e:
            print(f"Error loading {file_path}: {e}")
    else:
        print(f"File for {year} does not exist: {file_path}")
```

# Check if any data was loaded
```{python}
if data:
    # Combine all years into one DataFrame
    all_data = pd.concat(data.values(), ignore_index=True)

    # Question 3: Plot the number of observations by year
    observations_by_year = all_data['Year'].value_counts().sort_index()
    observations_by_year.plot(kind='bar', title="Number of Observations by Year")
    plt.xlabel('Year')
    plt.ylabel('Number of Observations')
    plt.show()
```
4
```{python}
    # Question 4(a): Plot the number of unique hospitals by year (using 'PRVDR_NUM' as a unique identifier)
    unique_hospitals_by_year = all_data.groupby('Year')['PRVDR_NUM'].nunique()
    unique_hospitals_by_year.plot(kind='bar', color='orange', title="Number of Unique Hospitals by Year")
    plt.xlabel('Year')
    plt.ylabel('Number of Unique Hospitals')
    plt.show()
```

```{python}
    # Question 4(b): Verification that each hospital appears only once per year
    # Count the occurrences of each hospital per year
    hospital_counts = all_data.groupby(['Year', 'PRVDR_NUM']).size()


    # Find cases where a hospital appears more than once in a given year
    duplicates = hospital_counts[hospital_counts > 1]
    
    # Check for duplicates
    if duplicates.empty:
        print("Each hospital appears only once per year. Data structure is valid.")
    else:
        print("Some hospitals appear multiple times per year. Below are the details:")
        print(duplicates)
```

## Identify hospital closures in POS file (15 pts) (*)

1. 
```{python}
# Convert the data type of Year from string to numeric
all_data['Year'] = pd.to_numeric(all_data['Year'], errors='coerce')

# Identify hospitals active in 2016
active_2016 = all_data[(all_data['Year'] == 2016) & (all_data['PGM_TRMNTN_CD'] == 0)]

# Initialize a list to store suspected closures
suspected_closures = []

# Check each hospital from 2016 for activity in subsequent years
for index, row in active_2016.iterrows():
    provider_id = row['PRVDR_NUM']
    facility_name = row['FAC_NAME']
    zip_code = row['ZIP_CD']
    
    # Get data for the provider in subsequent years
    provider_data = all_data[(all_data['PRVDR_NUM'] == provider_id) & (all_data['Year'] > 2016)].sort_values('Year')
    
    # Initialize closure year as None
    closure_year = None
    
    # Check each year for termination
    for year, year_data in provider_data.groupby('Year'):
        if year_data['PGM_TRMNTN_CD'].iloc[0] != 0:  # If the provider is terminated
            closure_year = year
            break
    
    # If the provider has been identified as closed in subsequent years, add to the list
    if closure_year:
        suspected_closures.append([provider_id, facility_name, zip_code, closure_year])

# Convert results to DataFrame and display the number of closures
suspected_closures_df = pd.DataFrame(suspected_closures, columns=['provider_id', 'facility_name', 'zip_code', 'suspected_closure_year'])
print("Number of suspected closures:", len(suspected_closures_df))

# Sort closures by facility_name and show top 10 for verification
closures_sorted = suspected_closures_df.sort_values(by='facility_name')
top_10_closures = closures_sorted[['facility_name', 'suspected_closure_year']].head(10)
print("Top 10 suspected closures (sorted by Facility Name):")
print(top_10_closures)
```

2. 
```{python}
# Sort suspected_closures_df by facility_name
closures_sorted = suspected_closures_df.sort_values(by='facility_name')

# Select only the facility_name and suspected_closure_year columns and display the top 10 rows
top_10_closures = closures_sorted[['facility_name', 'suspected_closure_year']].head(10)

# Display the result
print(top_10_closures)
```

3. 
```{python}
# Find the zip code whose number of hospitals has not decreased.
active_by_zip_year = all_data[all_data['PGM_TRMNTN_CD'] == 0].groupby(['ZIP_CD', 'Year']).size().unstack(fill_value=0)

# Initialize lists to store confirmed closures and potential merger/acquisition lists
confirmed_closures_indexes = []

# Compare 2016 and 2018 to check if the number of hospitals has decreased due to the suspected closure in 2017 (A)
A = suspected_closures_df[
    (suspected_closures_df['suspected_closure_year'] == 2017) &
    (suspected_closures_df['zip_code'].map(lambda z: active_by_zip_year.loc[z, 2016] > active_by_zip_year.loc[z, 2018]))
].index.tolist()

# Compare 2017 and 2019 to check if the number of hospitals has decreased due to the suspected closure in 2018 (B)
B = suspected_closures_df[
    (suspected_closures_df['suspected_closure_year'] == 2018) &
    (suspected_closures_df['zip_code'].map(lambda z: active_by_zip_year.loc[z, 2017] > active_by_zip_year.loc[z, 2019]))
].index.tolist()

# Combine indices of hospitals confirmed to be closed in A and B, remove duplicates to create confirmed closures list
confirmed_closures_indexes = list(set(A + B))

# Convert confirmed closures and merger/acquisition lists to DataFrames
confirmed_closures_df = suspected_closures_df.loc[confirmed_closures_indexes]
merge_acquisition_df = suspected_closures_df.drop(index=confirmed_closures_indexes)

# Print the result
print("Number of confirmed closures after filtering:", len(confirmed_closures_df))
print("Number of hospitals identified as potential mergers/acquisitions:", len(merge_acquisition_df))
```
    a.
      ## Among the suspected closures, 83 hospitals fit the definition of potentially being a merger/acquisition.
    b.
      ## After correcting this, 91 hospitals have left.
    c.
```{python}
# Report the first 10 rows of the result by name.
confirmed_closures_sorted_df = confirmed_closures_df.sort_values(by='facility_name', ascending=True)
print(confirmed_closures_sorted_df[['facility_name', 'zip_code', 'suspected_closure_year']].head(10))
```

## Download Census zip code shapefile (10 pt) 

1. 
    a.
    b. 
2. 

## Calculate zip code’s distance to the nearest hospital (20 pts) (*)

1. 
1-1. The dimensions of the dimensions of the resulting GeoDataFrame is 33,120 rows and 6 columns.
1-2. The meaning of each columns is as follow:
- GEO_ID : A unique identifier for each ZIP code area
- ZCTA5 : ZIP Code Tabulation Area (ZCTA), a 5-digit code corresponding to the ZIP code
- NAME : Name of the ZCTA (usually the same as ZCTA5)
- LSAD : Legal/Statistical Area Description, indicating the legal or statistical description of the area
- CENSUSAREA : The size of the ZIP code area, often used in census data
- geometry : The centroid coordinates (latitude and longitude) of the ZIP code area

```{python}
import geopandas as gpd
from shapely.geometry import Point

# Load ZIP code shapefile
shapefile_path = "/Users/sohyunlim/Desktop/python-ps4-shilm/gz_2010_us_860_00_500k/gz_2010_us_860_00_500k.shp"
gdf = gpd.read_file(shapefile_path)

# Calculate centroids for each ZIP code
zips_all_centroids = gdf.copy()
zips_all_centroids['geometry'] = zips_all_centroids.geometry.centroid

# Display dimensions and column explanations
print("Dimensions of zips_all_centroids:", zips_all_centroids.shape)
print("Columns in zips_all_centroids:", zips_all_centroids.columns)
```

2. 
2-1. Unique zip codes in zips_texas_centroids are 1,935.
2-2. Unique zip codes in zips_texas_borderstates_centroids are 4,057.
```{python}
# Filter ZIP codes for Texas (prefix: 750-799, including 733)
zips_texas_centroids = zips_all_centroids[
    zips_all_centroids['ZCTA5'].astype(str).str[:3].astype(int).between(750, 799) |
    (zips_all_centroids['ZCTA5'].astype(str).str[:3] == '733')
]

# Filter ZIP codes for Texas and bordering states (NM: 870-885, OK: 730-749 (except 733), AR: 716-729, LA: 700-714)
zips_texas_borderstates_centroids = zips_all_centroids[
    zips_all_centroids['ZCTA5'].astype(str).str[:3].astype(int).between(700, 714) |  # LA
    zips_all_centroids['ZCTA5'].astype(str).str[:3].astype(int).between(716, 729) |  # AR
    (zips_all_centroids['ZCTA5'].astype(str).str[:3].astype(int).between(730, 749) & 
     (zips_all_centroids['ZCTA5'].astype(str).str[:3] != '733')) |                   # OK excluding 733
    zips_all_centroids['ZCTA5'].astype(str).str[:3].astype(int).between(870, 885) |  # NM
    zips_all_centroids['ZCTA5'].astype(str).str[:3].astype(int).between(750, 799)    # TX including 750-799
]

# Print unique ZIP code counts
print("Unique ZIP codes in Texas:", zips_texas_centroids['ZCTA5'].nunique())
print("Unique ZIP codes in Texas and bordering states:", zips_texas_borderstates_centroids['ZCTA5'].nunique())
```

3. 
4. 
    a.
    b.
5. 
    a.
    b.
    c.
    
## Effects of closures on access in Texas (15 pts)

1. 
2. 
3. 
4. 

## Reflecting on the exercise (10 pts) 
